# monitor_app.py

import streamlit as st
import psutil
from datetime import datetime
import time
import matplotlib.pyplot as plt
import requests  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
import json      # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ

st.set_page_config(page_title="PreBreak Monitor", layout="wide")

st.title("üíª PreBreak System Monitor")
st.markdown("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CPU, RAM, Disk ‡πÅ‡∏•‡∏∞ Battery ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå")

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE Alert (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ---
# *** ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ***
LINE_WEBHOOK_URL = "https://line-webhook-php.onrender.com" # <-- ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ URL ngrok ‡πÅ‡∏•‡∏∞ Path ‡∏Ç‡∏≠‡∏á webhook.php ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
LINE_TARGET_USER_ID = ".0937466471" # <-- ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ User ID ‡∏Ç‡∏≠‡∏á LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Threshold (‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
# ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ Hardcode ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ config.json ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
CPU_LIMIT = 1 # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå CPU ‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏π‡∏á
RAM_LIMIT = 1 # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå RAM ‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏π‡∏á
DISK_LIMIT = 1 # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå Disk ‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏π‡∏á

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ã‡πâ‡∏≥‡πÜ (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥)
alert_sent_cpu = False
alert_sent_ram = False
alert_sent_disk = False
# --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---


placeholder = st.empty()

cpu_data = []
ram_data = []
disk_data = []
MAX_POINTS = 30

monitoring = st.checkbox("‡πÄ‡∏£‡∏¥‡πà‡∏° Monitoring", value=True)

while monitoring:
    # 1. ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    cpu = psutil.cpu_percent(interval=1) # ‡πÄ‡∏û‡∏¥‡πà‡∏° interval ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    ram = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    battery = psutil.sensors_battery()
    battery_percent = battery.percent if battery else "N/A"

    # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü
    cpu_data.append(cpu)
    ram_data.append(ram)
    disk_data.append(disk)

    if len(cpu_data) > MAX_POINTS:
        cpu_data.pop(0)
        ram_data.pop(0)
        disk_data.pop(0)

    # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Streamlit UI
    with placeholder.container():
        st.metric("üñ•Ô∏è CPU (%)", f"{cpu:.1f}")
        st.metric("üß† RAM (%)", f"{ram:.1f}")
        st.metric("üíΩ Disk (%)", f"{disk:.1f}")
        st.metric("üîã Battery (%)", f"{battery_percent}")

        st.line_chart({
            "CPU": cpu_data,
            "RAM": ram_data,
            "Disk": disk_data
        })

    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ---
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    alert_messages = []

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CPU
    if cpu > CPU_LIMIT:
        if not alert_sent_cpu:
            alert_messages.append(f"üñ•Ô∏è CPU usage is high: {cpu:.1f}% (Limit: {CPU_LIMIT}%)")
            alert_sent_cpu = True
    else:
        alert_sent_cpu = False # Reset ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RAM
    if ram > RAM_LIMIT:
        if not alert_sent_ram:
            alert_messages.append(f"üß† RAM usage is high: {ram:.1f}% (Limit: {RAM_LIMIT}%)")
            alert_sent_ram = True
    else:
        alert_sent_ram = False # Reset ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Disk
    if disk > DISK_LIMIT:
        if not alert_sent_disk:
            alert_messages.append(f"üíΩ Disk usage is high: {disk:.1f}% (Limit: {DISK_LIMIT}%)")
            alert_sent_disk = True
    else:
        alert_sent_disk = False # Reset ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE webhook
    if alert_messages:
        full_alert_message = f"üö® PreBreak Alert ({current_time}):\n" + "\n".join(alert_messages)

        payload = {
            "message": full_alert_message,
            "userId": LINE_TARGET_USER_ID
        }
        headers = {'Content-Type': 'application/json'}

        try:
            response = requests.post(LINE_WEBHOOK_URL, data=json.dumps(payload), headers=headers)
            response.raise_for_status() # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HTTP status code (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 2xx ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î exception)
            st.write(f"Alert sent to LINE: {full_alert_message}") # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Streamlit ‡∏î‡πâ‡∏ß‡∏¢
            print(f"[{current_time}] Alert sent to LINE: {full_alert_message}") # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Console/Terminal ‡∏î‡πâ‡∏ß‡∏¢
        except requests.exceptions.RequestException as e:
            st.warning(f"Error sending alert to LINE: {e}") # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Streamlit ‡∏î‡πâ‡∏ß‡∏¢
            print(f"[{current_time}] Error sending alert to LINE: {e}") # ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Console/Terminal ‡∏î‡πâ‡∏ß‡∏¢
    # --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---

    time.sleep(2)

    # ‡∏´‡∏¢‡∏∏‡∏î loop ‡∏ñ‡πâ‡∏≤ checkbox ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
    if not monitoring:
        st.stop() # ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Streamlit loop